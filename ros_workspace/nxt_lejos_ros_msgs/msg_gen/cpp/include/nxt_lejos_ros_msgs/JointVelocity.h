/* Auto-generated by genmsg_cpp for file /home/n-31v/robotic-software/ros_workspace/nxt_lejos_ros_msgs/msg/JointVelocity.msg */
#ifndef NXT_LEJOS_ROS_MSGS_MESSAGE_JOINTVELOCITY_H
#define NXT_LEJOS_ROS_MSGS_MESSAGE_JOINTVELOCITY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace nxt_lejos_ros_msgs
{
template <class ContainerAllocator>
struct JointVelocity_ {
  typedef JointVelocity_<ContainerAllocator> Type;

  JointVelocity_()
  : name()
  , velocity(0.0)
  {
  }

  JointVelocity_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , velocity(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef double _velocity_type;
  double velocity;


  typedef boost::shared_ptr< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator>  const> ConstPtr;
}; // struct JointVelocity
typedef  ::nxt_lejos_ros_msgs::JointVelocity_<std::allocator<void> > JointVelocity;

typedef boost::shared_ptr< ::nxt_lejos_ros_msgs::JointVelocity> JointVelocityPtr;
typedef boost::shared_ptr< ::nxt_lejos_ros_msgs::JointVelocity const> JointVelocityConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace nxt_lejos_ros_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2fd9f71288435c0d2a1acae968c9052e";
  }

  static const char* value(const  ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2fd9f71288435c0dULL;
  static const uint64_t static_value2 = 0x2a1acae968c9052eULL;
};

template<class ContainerAllocator>
struct DataType< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "nxt_lejos_ros_msgs/JointVelocity";
  }

  static const char* value(const  ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
float64 velocity\n\
\n\
";
  }

  static const char* value(const  ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct JointVelocity_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::nxt_lejos_ros_msgs::JointVelocity_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // NXT_LEJOS_ROS_MSGS_MESSAGE_JOINTVELOCITY_H

